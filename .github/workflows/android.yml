name: Android CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run unit tests
        run: ./gradlew test

      - name: Print unit test reports directory contents
        run: ls -R app/build/reports/tests 
        continue-on-error: true

      - name: Unit tests results
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-results
          path: '**/build/reports/tests'
          continue-on-error: true

  instrumentation-tests:
    name: Run Instrumented Tests
    runs-on: ubuntu-latest

    steps:
    - name: Delete unnecessary tools ðŸ”§
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
          android: false # Don't remove Android tools
          tool-cache: true # Remove image tool cache - rm -rf "$AGENT_TOOLSDIRECTORY"
          dotnet: true # rm -rf /usr/share/dotnet
          haskell: true # rm -rf /opt/ghc...
          swap-storage: true # rm -f /mnt/swapfile (4GiB)
          docker-images: false # Takes 16s, enable if needed in the future
          large-packages: false # includes google-cloud-sdk and it's slow

    - name: Enable KVM group perms
      run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls /dev/kvm

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
       path: |
        ~/.gradle/caches
        ~/.gradle/wrapper
        .gradle
        **/build
       key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
       restore-keys: |
        ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Start emulator and run tests
      uses: reactivecircus/android-emulator-runner@v2.30.1
      with:
       api-level: 34
       arch: x86_64
       disk-size: 6000M
       heap-size: 600M
       emulator-boot-timeout: 300 
       emulator-options: -memory 4096 -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
       disable-animations: true
       sdcard-path-or-size: 100M
       script: ./gradlew connectedCheck

    - name: Print instrumented test reports directory contents
      run: ls -R app/build/reports/androidTests
      continue-on-error: true

    - name: Upload instrumented test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: instrumentation-tests-results
        path: '**/build/reports/androidTests'
        continue-on-error: true

  build-debug-apk:
    needs: [unit-test, instrumentation-tests]
    name: Build and Upload Debug APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run lint checks
      run: ./gradlew lintDebug

    - name: Build Debug APK
      run: ./gradlew assembleDebug

    - name: Create the build directory
      run: mkdir -p build_apks/debug

    - name: Copy generated APK to build directory
      run: cp app/build/outputs/apk/debug/app-debug.apk build_apks/debug/

    - name: Commit and Push APK
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add build_apks/debug/app-debug.apk
        git commit -m "Add debug APK"
        git push
